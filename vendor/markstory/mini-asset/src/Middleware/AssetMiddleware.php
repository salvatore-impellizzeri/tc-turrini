<?php
declare(strict_types=1);

namespace MiniAsset\Middleware;

use Exception;
use MiniAsset\AssetConfig;
use MiniAsset\Factory;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

/**
 * A PSR7 middleware for serving assets from mini-asset.
 *
 * This provides a development grade middleware component that can
 * serve the assets that mini-asset could build. This component is *not*
 * recommended for production as it will be much slower than serving the
 * static files generated by the CLI tool.
 */
class AssetMiddleware
{
    private AssetConfig $config;
    private string $outputDir;
    private string $urlPrefix;

    /**
     * Constructor.
     *
     * @param \MiniAsset\AssetConfig $config    The config instance for your application.
     * @param string                 $outputDir The directory development build caches should be stored in.
     *                                          Defaults to sys_get_temp_dir().
     * @param string                 $urlPrefix The URL prefix that assets are under. Defaults to /asset/.
     */
    public function __construct(AssetConfig $config, ?string $outputDir = null, string $urlPrefix = '/asset/')
    {
        $this->config = $config;
        $this->outputDir = $outputDir ?: sys_get_temp_dir() . DIRECTORY_SEPARATOR;
        $this->urlPrefix = $urlPrefix;
    }

    /**
     * Apply the asset middleware.
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  The request.
     * @param \Psr\Http\Message\ResponseInterface      $response The response.
     * @param callable                                 $next     The callable to invoke the next middleware layer.
     * @return \Psr\Http\Message\ResponseInterface A response.
     */
    public function __invoke(ServerRequestInterface $request, ResponseInterface $response, callable $next): ResponseInterface
    {
        $path = $request->getUri()->getPath();
        if (strpos($path, $this->urlPrefix) !== 0) {
            // Not an asset request.
            return $next($request, $response);
        }
        $factory = new Factory($this->config);
        $assets = $factory->assetCollection();

        $targetName = substr($path, strlen($this->urlPrefix));
        if (!$assets->contains($targetName)) {
            // Unknown build.
            return $next($request, $response);
        }

        try {
            $build = $assets->get($targetName);
            $compiler = $factory->cachedCompiler($this->outputDir);
            $contents = $compiler->generate($build);
        } catch (Exception $e) {
            // Could not build the asset.
            $response->getBody()->write($e->getMessage());

            return $response->withStatus(400)
                ->withHeader('Content-Type', 'text/plain');
        }

        return $this->respond($response, $contents, $build->ext());
    }

    private function respond(ResponseInterface $response, string $contents, string $ext): ResponseInterface
    {
        // Deliver built asset.
        $body = $response->getBody();
        $body->write($contents);
        $body->rewind();

        return $response->withHeader('Content-Type', $this->mapType($ext));
    }

    /**
     * Get the content type for an extension.
     *
     * @param string $ext The extension to map to a content type.
     * @return string
     */
    private function mapType(string $ext): string
    {
        $types = [
            'css' => 'application/css',
            'js' => 'application/javascript',
            'svg' => 'image/svg+xml',
        ];

        return $types[$ext] ?? 'application/octet-stream';
    }
}
