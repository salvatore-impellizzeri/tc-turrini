<?php
declare(strict_types=1);

namespace AssetCompress\Command;

use AssetCompress\Config\ConfigFinder;
use AssetCompress\Factory;
use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use DirectoryIterator;
use MiniAsset\AssetConfig;

/**
 * Command to clear build files.
 */
class ClearCommand extends Command
{
    /**
     * Hook method for defining this command's option parser.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The parser to be defined
     * @return \Cake\Console\ConsoleOptionParser The built parser.
     */
    public function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser = parent::buildOptionParser($parser);

        $parser
            ->setDescription('Remove files generated by AssetCompress')
            ->addOption('config', [
                'help' => 'The config file to use.',
                'short' => 'c',
                'default' => CONFIG . 'asset_compress.ini',
            ]);

        return $parser;
    }

    /**
     * Clear built files.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io
     * @return int The exit code
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        $configFinder = new ConfigFinder();
        $config = $configFinder->loadAll($args->getOption('config'));
        $factory = new Factory($config);

        $io->verbose('Clearing build timestamp.');
        $writer = $factory->writer();
        $writer->clearTimestamps();

        $io->verbose('Clearing build files:');
        $this->clearBuilds($config, $factory, $io);

        $io->verbose('');
        $io->out('<success>Complete</success>');

        return static::CODE_SUCCESS;
    }

    /**
     * clear the builds for a specific extension.
     *
     * @param \MiniAsset\AssetConfig $config The asset configuration.
     * @param \AssetCompress\Factory $factory The factory instance
     * @param \Cake\Console\ConsoleIo $io Consoleio
     * @return void
     */
    protected function clearBuilds(AssetConfig $config, Factory $factory, ConsoleIo $io): void
    {
        $themes = (array)$config->general('themes');
        if ($themes) {
            $config->theme($themes[0]);
        }
        $assets = $factory->assetCollection();
        if (count($assets) === 0) {
            $io->err('No build targets defined, skipping');

            return;
        }

        $targets = [];
        foreach (iterator_to_array($assets) as $target) {
            $this->clearPath($io, $target->outputDir() . DS, $themes, [$target->name()]);
            $targets[] = $target->name();
        }

        $this->clearPath($io, CACHE . 'asset_compress' . DS, $themes, $targets);
    }

    /**
     * Clear a path of build targets.
     *
     * @param \Cake\Console\ConsoleIo $io The consoleio
     * @param string $path The root path to clear.
     * @param array $themes The themes to clear.
     * @param array $targets The build targets to clear.
     * @return void
     */
    protected function clearPath(ConsoleIo $io, string $path, array $themes, array $targets): void
    {
        if (!file_exists($path)) {
            return;
        }

        $dir = new DirectoryIterator($path);
        foreach ($dir as $file) {
            $name = $base = $file->getFilename();
            if (in_array($name, ['.', '..'])) {
                continue;
            }
            // timestamped files.
            if (preg_match('/^(.*)\.v\d+(\.[a-z]+)$/', $name, $matches)) {
                $base = $matches[1] . $matches[2];
            }
            // themed files
            foreach ($themes as $theme) {
                if (strpos($base, $theme) === 0 && strpos($base, '-') !== false) {
                    [, $base] = explode('-', $base);
                }
            }
            if (in_array($base, $targets)) {
                $io->verbose(' - Deleting ' . $path . $name);
                unlink($path . $name);
                continue;
            }
        }
    }
}
